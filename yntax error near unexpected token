[1mdiff --git a/main.py b/main.py[m
[1mindex 9fc5f8d..79d6031 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -4,7 +4,6 @@[m [mfrom configs.base_config import Development, Staging[m
 from werkzeug.utils import redirect[m
 from flask_sqlalchemy import SQLAlchemy[m
 import psycopg2[m
[31m-from datetime import datetime[m
 [m
 app = Flask(__name__)[m
 db = SQLAlchemy(app)[m
[36m@@ -58,16 +57,6 @@[m [mclass Product(db.Model):[m
         else:[m
             return False[m
 [m
[31m-class Sale(db.Model):[m
[31m-    __tablename__ = "sales"[m
[31m-[m
[31m-    id = db.Column(db.Integer, primary_key = True)[m
[31m-    product_id = db.Column(db.Integer, nullable=False)[m
[31m-    quantity_sold = db.Column(db.Float, nullable=False)[m
[31m-    date_sold = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)[m
[31m-[m
[31m-[m
[31m-[m
 # create all tables[m
 @app.before_first_request[m
 def create_tables():[m
[36m@@ -77,7 +66,7 @@[m [mdef create_tables():[m
 [m
 [m
   [m
[31m-conn = psycopg2.connect("dbname=kiosk user=postgres port=5433 password=12345") #connection to local db[m
[32m+[m[32m# conn = psycopg2.connect("dbname=kiosk user=postgres port=5433 password=12345") #connection to local db[m
 conn = psycopg2.connect(dbname="d5c04cvapeivr1", host="ec2-79-125-30-28.eu-west-1.compute.amazonaws.com", user="ruusozkswdaiez", port=5432,  password="c9424fa337795052a1500084fa6b4442d12b3977458eeac2bba5a2300964783b") #connection to heroku db[m
 cur = conn.cursor()[m
 [m
[36m@@ -152,7 +141,7 @@[m [mdef inventories():[m
         # conn.commit()[m
         return redirect(url_for('inventories'))[m
 [m
[31m-@app.route('/make_sale', methods=['POST','GET']) #is accessed when sale button is clicked in inventories template[m
[32m+[m[32m@app.route('/make_sale', methods=['POST','GET']) #is accessed when sale button is clicked[m
 def make_sale():[m
     if request.method == 'GET':[m
         [m
[36m@@ -163,16 +152,10 @@[m [mdef make_sale():[m
 [m
         print(pid,qt)[m
 [m
[31m-        # cur.execute("UPDATE products SET stock_quantity =%s WHERE id= %s ", (qt,pid))[m
[31m-        # cur.execute("INSERT INTO sales (product_id, quantity_sold, date_sold) VALUES (%s,%s,'NOW()')", (pid,qt))[m
[31m-        # conn.commit()[m
[31m-        item_selected = Sale(product_id=pid,quantity_sold=qt)[m
[31m-        db.session.add(item_selected)[m
[31m-        db.session.commit()[m
[31m-        print(item_selected)[m
[31m-    [m
[31m-[m
[31m-        return redirect(url_for('sales'),item_selected=item_selected)[m
[32m+[m[32m        cur.execute("UPDATE products SET stock_quantity =%s WHERE id= %s ", (qt,pid))[m
[32m+[m[32m        cur.execute("INSERT INTO sales (product_id, quantity_sold, date_sold) VALUES (%s,%s,'NOW()')", (pid,qt))[m
[32m+[m[32m        conn.commit()[m
[32m+[m[32m        return redirect(url_for('sales'))[m
 [m
 @app.route('/edit_inventory/<int:id>', methods=['POST','GET'])[m
 def edit(id):[m
[36m@@ -206,12 +189,10 @@[m [mdef single_inventories(inventory_id):[m
 [m
 @app.route('/sales', methods=['POST','GET'])[m
 def sales():[m
[31m-    # cur.execute("SELECT sales.id, product_id, quantity_sold, date_sold, name, selling_price*quantity_sold as total_sales FROM sales INNER JOIN products ON products.id = sales.product_id;")[m
[31m-    # d = cur.fetchall()[m
[31m-    sales = Sale.query.all()[m
[31m-    [m
[31m-    print(sales)[m
[31m-    return render_template('sales.html',sales=sales)[m
[32m+[m[32m    cur.execute("SELECT sales.id, product_id, quantity_sold, date_sold, name, selling_price*quantity_sold as total_sales FROM sales INNER JOIN products ON products.id = sales.product_id;")[m
[32m+[m[32m    d = cur.fetchall()[m
[32m+[m[32m    print(d)[m
[32m+[m[32m    return render_template('sales.html',d=d)[m
 [m
 @app.route('/users')[m
 def users():[m
